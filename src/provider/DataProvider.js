import React from 'react';
import { forEach } from 'lodash';
import { ApolloClient } from 'apollo-client';
import { ApolloProvider } from '@apollo/react-hooks';
import { HttpLink } from 'apollo-link-http';
import { ApolloLink } from 'apollo-link';
import { onError } from 'apollo-link-error';
import { InMemoryCache, IntrospectionFragmentMatcher } from 'apollo-cache-inmemory';
// import typeDefs from './typeDefs';
// import resolvers from './resolvers';
import { LOCAL_STORAGE, GRAPHQL_URL } from './constants';

// fragmentTypes.json generated by schemaQuery.js
import introspectionQueryResultData from '../fragmentTypes.json';

const authMiddleware = new ApolloLink((operation, forward) => {
    operation.setContext({
        headers: {
            account: JSON.parse(localStorage.getItem(LOCAL_STORAGE)) || null,
        }
    });
    return forward(operation);
});

const httpLink = new HttpLink({
    uri: GRAPHQL_URL
});

const fragmentMatcher = new IntrospectionFragmentMatcher({
    introspectionQueryResultData
});

const cache = new InMemoryCache({
    // https://github.com/apollographql/apollo-client/issues/5604
    cacheRedirects: {
        Query: {
            account: (_, args, { getCacheKey }) => (
                getCacheKey({
                    id: args.id, 
                    __typename: 'Account',  
                })
            )
        },
    },
    fragmentMatcher
});

const errorLink = onError(({ networkError, graphQLErrors }) => {
    if (networkError) {
        // const { message, statusCode } = networkError;
        // TODO
    }
    if (graphQLErrors) {
        forEach(graphQLErrors, ({ message }) => {
            // TODO
        });
    }
});
  
const link = ApolloLink.from([
    authMiddleware,
    errorLink,
    httpLink,
]);

const client = new ApolloClient({
    link,
    cache,
    dataIdFromObject: object => object.id,
    // typeDefs,
    // resolvers
});

export default ({ children }) => (
    <ApolloProvider client={client}>
        {children}
    </ApolloProvider>
);